// Add 1 to a number represented as linked list
// Number is represented in linked list such that each digit corresponds to a node in linked list. 
// Add 1 to it. For example 1999 is represented as (1-> 9-> 9 -> 9) and 
// adding 1 to it should change it to (2->0->0->0) 

// Steps:-
// input : 9->9->9->1
// 1.Reverse linked list(1->9->9->9)
// 2.Add 1 and carry move to the next node  (0->0->0->2)
// 3.Again reverse the modified list(2->0->0->0)
// 4.return head

//Implementation:-
#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
        int data;
        Node* next;
};

Node* newNode(int data)
{
    Node* new_node = new Node;
    new_node->data = data;
    new_node->next = nullptr;
    return new_node;
}

Node* reverse(Node* head)
{
    Node* curr = head;
    Node* prev = nullptr;
    Node* next = nullptr;
    while(curr)
    {
        next = curr->next;
        curr ->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

Node* addUtil(Node*  head)
{
    Node* res = head;
    Node* temp,*prev = nullptr;
    int carry = 1;
    int sum;

    while(head) 
    {
        sum = carry + head->data;
        carry = (sum>=10)?1:0;
        sum = sum%10;
        head->data = sum;
        temp = head;
        head = head->next;
    }
    if(carry>0)
        temp->next = newNode(carry);
    return res;
}

Node* addOne(Node* head)
{
    head = reverse(head);
    head = addUtil(head);
    return reverse(head);
}

void printList(Node* node)
{
    while(node)
    {
        cout<<node->data<<" ";
        node = node->next;
    }
    cout<<endl;
}

int main()
{
    Node* head = newNode(1);
    head->next = newNode(9);
    head->next->next = newNode(9);
    head->next->next->next = newNode(9);
    cout<<"list is ......"<<endl;
    printList(head);

    head = addOne(head);

    cout<<"Resultant list is ..........."<<endl;
    printList(head);
    return 0;
}
