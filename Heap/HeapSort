// Heap sort is a comparison-based sorting technique based on Binary Heap data structure. 
// It is similar to selection sort where we first find the minimum element and place the 
// minimum element at the beginning. We repeat the same process for the remaining elements.
// Input data: 4, 10, 3, 5, 1
//          4(0)
//         /   \
//      10(1)   3(2)
//     /   \
//  5(3)    1(4)

// Applying heapify procedure to index 0:
//         10(0)
//         /  \
//      5(1)  3(2)
//     /   \
//  4(3)    1(4)

#include<bits/stdc++.h>
using namespace std;

void heapify(vector<int>&arr , int n, int i)
{
    int largest = i;
    int l = 2*i+1;
    int r = 2*i+2;

    if(l<n && arr[l]>arr[largest])
        largest=l;
    if(r<n && arr[r]>arr[largest])
        largest=r;
    if(largest!=i)
    {
        swap(arr[i],arr[largest]);
        heapify(arr,n,largest);
    }
}

void heapSort(vector<int>&arr, int n)
{
    for(int i=n/2-1 ; i>=0 ; i--)
        heapify(arr,n,i);
    for(int i=n-1 ; i>0 ; i--)
    {
        swap(arr[0],arr[i]);
        heapify(arr,i,0);
    }
}

void printArray(vector<int>&arr , int n)
{
    for(int i=0 ; i<n ; i++)    cout<<arr[i]<<" ";
    cout<<endl;
}

int main()
{
    int n; cin>>n;
    vector<int>arr(n);
    for(int i=0 ; i<n ; i++)    cin>>arr[i];
    heapSort(arr,n);
    cout<<"Sorted Array is = ";
    printArray(arr,n);
    return 0;   
}
