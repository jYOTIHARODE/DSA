// Check whether an Array is Subarray of another Array
// Ex:- A[] = {2,3,1,5,1,1,2}
//      B[] = {3,0,5,1}
       // output:-  Yes 
// Method 1
// Simple Approach: A simple approach is to run two nested loops and generate all subarrays 
// of the array A[] and use one more loop to check 
// if any of the subarray of A[] is equal to the array B[].

//Method 2
// An efficient approach is to use two pointers to traverse both the array simultaneously.
// Keep the pointer of array B[] still and if 
// any element of A[] matches with the first element of B[] then 
// increase the pointer of both the array else 
// set the pointer of A to the next element of the previous starting point and 
// reset the pointer of B to 0. If all the elements of B are matched then 
// print YES otherwise print NO.
#include<bits/stdc++.h>
using namespace std;

bool isSubarray(int A[],int B[],int n,int m)
{
    int i=0,j=0;
    while(i<n and j<m){
        if(A[i] == B[j]){
            i++;
            j++;
            if(j==m)    return true;
        }
        else{
            i = i-j+1;
            j=0;
        }
    }
    return false;
}

int main()
{
    int A[] = {2,3,1,5,1,1,2};
    int B[] = {3,1,5,1,1};
    int n = sizeof(A)/sizeof(int);
    int m = sizeof(B)/sizeof(int);

    if(isSubarray(A,B,n,m)) cout<<"Yes"<<endl;
    else    cout<<"No"<<endl;

    return 0;
}
