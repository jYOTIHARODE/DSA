// Input: array = {1, 2, 3, 4, 5}, sum = 9
// Output: 5, 3, 1
// Explanation: There is a triplet (5, 3 and 1) present 
// in the array whose sum is 9. 

// Time Complexity: O(n3)
// Space Complexity: O(1)
// Approach: A simple method is to generate all possible triplets and compare the sum of every triplet with the given value.
// The following code implements this simple method using three nested loops.
// Method1- NAIVE APPROACH

#include<bits/stdc++.h>
using namespace std;

bool find3Numbers(vector<int>arr , int n, int sum)
{
    for(int i=0 ; i<n-2 ; i++)
    {
        for(int j=i+1 ; j<n-1 ; j++)
        {
            for(int k=j+1 ; k<n ; k++)
            {
                if(arr[i]+arr[j]+arr[k]==sum)
                {
                    return true;
                }
            }
        }
    }
    return false;
}

int main()
{
    int n; cin>>n;
    vector<int>arr(n);
    for(int i=0 ; i<n ; i++)
        cin>>arr[i];
    cout<<find3Numbers(arr,n,13)<<endl;
    return 0;
}

// Time Complexity: O(n2)
// Space Complexity: O(1)
// Approach:By Sorting the array the efficiency of the algorithm can be improved. This efficient approach uses the two-pointer technique. 
//Traverse the array and fix the first element of the triplet. Now use the Two Pointers algorithm to find if there is a pair whose sum is equal to x â€“ array[i].
//Two pointers algorithm take linear time so it is better than a nested loop.


void printTriplet(int arr[],int n,int target)
{
   sort(arr,arr+n);
    int l,h;
   for(int i=0;i<n-2;i++)
   {
     int l=i+1;
     int h=n-1;
     while(l<h)
     {
          if(arr[i]+arr[l]+arr[h]==target)
          {
             cout<<arr[i]<<" "<<arr[l]<<" "<<arr[h]<<endl;
              l++;h--;
           }
          else if(arr[i]+arr[l]+arr[h]>target)
             h--;
           else l++;
       }
    }
}
