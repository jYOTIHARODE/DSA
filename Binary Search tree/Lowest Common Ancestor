// Time Complexity  -  O(N)
// In Binary Search Tree, using BST properties, we can find LCA in O(h) time 
// where h is the height of the tree. 

// Method 1 (By Storing root to n1 and root to n2 paths): 
// 1) Find a path from the root to n1 and store it in a vector or array. 
// 2) Find a path from the root to n2 and store it in another vector or array. 
// 3) Traverse both paths till the values in arrays are the same. Return the common element just before the mismatch. 

#include <iostream>
#include <vector>
using namespace std;

struct Node
{
	int key;
	struct Node *left;
    struct Node *right;
};

Node * newNode(int k)
{
	Node *temp = new Node;
	temp->key = k;
	temp->left = nullptr;
    temp->right = nullptr;
	return temp;
}

bool findPath(Node *root, vector<int> &path, int k)
{
	if(root == NULL) return false;
	path.push_back(root->key);
	if (root->key == k)
		return true;
	if ( (root->left && findPath(root->left, path, k)) ||
		(root->right && findPath(root->right, path, k)) )
		return true;
	path.pop_back();
	return false;
}

int findLCA(Node *root, int n1, int n2)
{
	vector<int> path1, path2;
	if ( !findPath(root, path1, n1) || !findPath(root, path2, n2))
		return -1;
	int i;
	for (i = 0; i < path1.size() && i < path2.size() ; i++)
		if (path1[i] != path2[i])
			break;
	return path1[i-1];
}

int main()
{
	Node * root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	root->right->left = newNode(6);
	root->right->right = newNode(7);
	cout << "LCA(4, 5) = " << findLCA(root, 4, 5)<<endl;
	cout << "LCA(4, 6) = " << findLCA(root, 4, 6)<<endl;
	cout << "LCA(3, 4) = " << findLCA(root, 3, 4)<<endl;
	cout << "LCA(2, 4) = " << findLCA(root, 2, 4)<<endl;
	return 0;
}
